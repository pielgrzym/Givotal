#!/usr/bin/env bash

test -z "$givotal_ref" && givotal_ref="$(git config givotal.ref)"
test -z "$givotal_ref" && givotal_ref="refs/heads/pivotal/main"

integration_branch=$(git config givotal.integration-branch)

print_tasks()
{
        git grep "^__PP|" "$givotal_ref":"$1" | cut -d "|" -f2,3 | sort -h | cut -d "|" -f2
}

modify_story() 
{
        story_id=$1
        token=$(git config givotal.token)
        project_id=$(git config givotal.projectid)
        curl -s -o /dev/null -H "X-TrackerToken: $token" -X PUT -H "Content-Length: 0" \
              "https://www.pivotaltracker.com/services/v3/projects/$project_id/stories/$story_id$2" 1> /dev/null
        if [[ "${?}" -ne "0" ]]; then
                echo "Error: story modification failed"
                exit 1
        fi
}

get_story_path()
{
        story_id=$1
        matches=($(git grep -l "^__PP.*$story_id" "$givotal_ref" -- current backlog | sort ))
        if (( ${#matches[@]} == 1 )); then
                echo "${matches[0]}"
                return 0
        else
                return 1
        fi
}

get_storyid_from_branch()
{
        ref="$(git symbolic-ref HEAD 2>/dev/null)"
        branch=${ref##refs/heads/}
        story_id=${branch%%-*}
        if [[ $story_id =~ [0-9]+ ]] && get_story_path "$story_id" >/dev/null; then
                echo $story_id 
                return 0
        else
                return 1
        fi
}

require_story_id()
{
        if [[ -n "$param1" ]]; then
                if get_story_path "$param1" >/dev/null; then
                        story_id=$param1
                else
                        echo "Invalid pivotal storyid"
                        exit 1
                fi
        else
                if ! story_id=$(get_storyid_from_branch); then
                        echo "Ambigous or invalid story id in branch name"
                        exit 1
                fi
        fi
}

